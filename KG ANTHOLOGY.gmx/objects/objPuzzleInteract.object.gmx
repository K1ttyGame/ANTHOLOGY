<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSlipBlockMask</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>phase = 0
drawArrowScale = 0
acc = 0
bubbleChange = 0

activate = true

mode = 0 //set in creation code

//portrait variables
currentNum = 0
portraitCode = 5 //set in creation code
passcode = ""
passcodeFormat = ""
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (activate == true) {

    if (phase == 0) {
        if (instance_exists(objPlayer) &amp;&amp; objPlayer.x &gt;= x &amp;&amp; objPlayer.x &lt;= x+32*image_xscale &amp;&amp; objPlayer.y &gt;= y &amp;&amp; objPlayer.y &lt;= y+32*image_yscale) {
            drawArrowScale = lerp(drawArrowScale, 1, .1)
            if (keyboard_check_pressed(global.upButton)) {
                with objPuzzleInteract {activate = false}
                activate = true
                phase = 1
                drawArrowScale = 1
                passcode = ""
            }
        }
        else
            drawArrowScale = lerp(drawArrowScale, 0, .5)
    }
    
    if (phase == 1) {
        objPlayer.frozen = true
        if (keyboard_check_pressed(global.shootButton)) {
            phase = 0
            with objPuzzleInteract {activate = true}
            objPlayer.frozen = false
        }
        
        if (mode &gt;= 4 &amp;&amp; mode &lt;= 6) {
            if (keyboard_check_pressed(vk_left)) 
                currentNum--
            if (keyboard_check_pressed(vk_right)) 
                currentNum++
            if (currentNum &lt; 0) currentNum = 9
            if (currentNum &gt; 9) currentNum = 0
            if (mode == 4 &amp;&amp; instance_exists(objPortraitDoor)) {
                if (currentNum == portraitCode)
                    objPortraitDoor.flag1 = true
                else
                    objPortraitDoor.flag1 = false
            }
            if (mode == 5 &amp;&amp; instance_exists(objPortraitDoor)) {
                if (currentNum == portraitCode)
                    objPortraitDoor.flag2 = true
                else
                    objPortraitDoor.flag2 = false
            }
            if (mode == 6 &amp;&amp; instance_exists(objPortraitDoor)) {
                if (currentNum == portraitCode)
                    objPortraitDoor.flag3 = true
                else
                    objPortraitDoor.flag3 = false
            }
        }
        
        if (mode == 8 or mode == 11) {
            if (string_length(passcode) &lt; 4) {
                if (keyboard_check_pressed(ord('0')))
                    passcode = string_insert(passcode, "0", 0)
                else if (keyboard_check_pressed(ord('1')))
                    passcode = string_insert(passcode, "1", 0)
                else if (keyboard_check_pressed(ord('2')))
                    passcode = string_insert(passcode, "2", 0)
                else if (keyboard_check_pressed(ord('3')))
                    passcode = string_insert(passcode, "3", 0)
                else if (keyboard_check_pressed(ord('4')))
                    passcode = string_insert(passcode, "4", 0)
                else if (keyboard_check_pressed(ord('5')))
                    passcode = string_insert(passcode, "5", 0)
                else if (keyboard_check_pressed(ord('6')))
                    passcode = string_insert(passcode, "6", 0)
                else if (keyboard_check_pressed(ord('7')))
                    passcode = string_insert(passcode, "7", 0)
                else if (keyboard_check_pressed(ord('8')))
                    passcode = string_insert(passcode, "8", 0)
                else if (keyboard_check_pressed(ord('9')))
                    passcode = string_insert(passcode, "9", 0)
            }
            if (passcode == "7734" &amp;&amp; mode == 8) or (passcode == "0506" &amp;&amp; mode == 11) {
                audio_play_sound(sndPuzzleSolved, 10, false)
                //with instance_create(16, 16, objWalljumpR) {
                //    persistent = true
                    //visible = false
                //}
                with objPuzzleInteract {activate = true}
                objPlayer.frozen = false
                instance_destroy()
                //activate = false
            }
            passcodeFormat = passcode
            var i
            for (i = string_length(passcode); i &lt; 4; i++)
                passcodeFormat = string_insert(passcodeFormat, "-", 0)
        }
        
    }
    
}

if (instance_exists(objPlayer) &amp;&amp; objPlayer.puzzleGUI == true) {
    phase = 0
    activate = true
}

if (mode == 7 &amp;&amp; global.gotItem[4] == 1 &amp;&amp; ds_list_find_index(global.inventory, 4) == -1) {
    mode = 8
}

if (mode == 8) {
    if instance_exists(objWalljumpR) instance_destroy()
}

if (global.gotItem[11] = 1 &amp;&amp; mode == 11) {
    instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (phase == 0)  
    draw_sprite_ext(sprDialoguePrompt, 0, x+sprite_width/2, y-32+(bubbleChange), drawArrowScale, drawArrowScale, 0, c_white, 1)
    
if (phase == 1) { //originally in draw gui
    if (mode &gt;= 0 &amp;&amp; mode &lt;= 11) {
        draw_set_font(fPirate)
        draw_set_halign(fa_center)
        draw_set_valign(fa_top)
        draw_set_color(c_white)
        draw_background_tiled_ext(bMansionBGLighter, 0, 0, 3, 3, c_white, 1)
        if (mode &gt;= 0 &amp;&amp; mode &lt;= 6)
            draw_sprite(sprAnimalNumberFrame, 0, 400, 512)
    }
    if (mode == 0) {
        draw_sprite(sprAnimalPuzzleFrame, 0, 400, 272)
        scrDrawTextDropShadow("4", c_white, 400, 512)
        }
    if (mode == 1) {
        draw_sprite(sprAnimalPuzzleFrame, 1, 400, 272)
        scrDrawTextDropShadow("0", c_white, 400, 512)
        }
    if (mode == 2) {
        draw_sprite(sprAnimalPuzzleFrame, 2, 400, 272)
        scrDrawTextDropShadow("4", c_white, 400, 512)
        }
    if (mode == 3) {
        draw_sprite(sprAnimalPuzzleFrame, 3, 400, 272)
        scrDrawTextDropShadow("2", c_white, 400, 512)
        }
    if (mode == 4) {
        draw_sprite(sprAnimalPuzzleFrame, 4, 400, 272)
        scrDrawTextDropShadow("&lt; " + string(currentNum) + " &gt;", c_white, 400, 512)
    }
    if (mode == 5) {
        draw_sprite(sprAnimalPuzzleFrame, 5, 400, 272)
        scrDrawTextDropShadow("&lt; " + string(currentNum) + " &gt;", c_white, 400, 512)
    }
    if (mode == 6) {
        draw_sprite(sprAnimalPuzzleFrame, 6, 400, 272)
        scrDrawTextDropShadow("&lt; " + string(currentNum) + " &gt;", c_white, 400, 512)
    }
    
    if (mode == 9) {
        draw_sprite_ext(sprMansionPoster1, 0, 408, 312, 1, 1, 0, c_black, .8)
        draw_sprite(sprMansionPoster1, 0, 400, 304)
        }
        
    if (mode == 10) {
        draw_sprite_ext(sprMansionPoster2, 0, 408, 312, 1, 1, 0, c_black, .8)
        draw_sprite(sprMansionPoster2, 0, 400, 304)
        }
    
    if (mode &gt;= 0 &amp;&amp; mode &lt;= 8)
        repeat (3) {draw_background_stretched(bGlow, 0, 0, 800, 608)}
    
    if (mode == 7) {
        draw_sprite(sprCatSetOpening, 0, 400, 304)
    }
    if (mode == 8 || mode == 11) {
        draw_sprite(sprNumPad, 0, 400, 304)
        draw_text(48, 16, passcodeFormat)
        
        var num1 = string_copy(passcodeFormat, 1, 1)
        var num2 = string_copy(passcodeFormat, 2, 1)
        var num3 = string_copy(passcodeFormat, 3, 1)
        var num4 = string_copy(passcodeFormat, 4, 1)
        
        if (num1 != "-")
            draw_sprite(sprNumPadNumbers, num1, 318, 100)
        if (num2 != "-")
            draw_sprite(sprNumPadNumbers, num2, 360, 100)
        if (num3 != "-")
            draw_sprite(sprNumPadNumbers, num3, 404, 100)
        if (num4 != "-")
            draw_sprite(sprNumPadNumbers, num4, 446, 100)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
