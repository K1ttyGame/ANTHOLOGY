<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>phase = 0
timer = 0

mode = 0 //determines which attack to do, define in cc
boundX1 = 0 //define in cc
boundY1 = 0
boundX2 = 0
boundY2 = 0

spawnCherryX1 = 0
spawnCherryY1 = 0
spawnCherryX2 = 0
spawnCherryY2 = 0

angle = 0
maxTimer = 0 //set in cc
accel = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (phase == 0) {
    if (instance_exists(objPlayer)) {
        if (objPlayer.x &gt; boundX1 &amp;&amp; objPlayer.x &lt; boundX2 &amp;&amp; objPlayer.y &gt; boundY1 &amp;&amp; objPlayer.y &lt; boundY2) {
            phase++
            instance_create(spawnCherryX1, spawnCherryY1, objPirateApple)
            instance_create(spawnCherryX2, spawnCherryY2, objPirateApple)
            audio_play_sound(sndChoose, 10, false)
        }
    }
}

if (phase == 1) {
    if (mode == 1) {
        timer++
        if (timer%5 == 0) {
            scrMakeCircle(432, 336, angle, 1, 2, objPirateApple)
            angle += 30.5
        }
        if (timer%20 == 0)
            scrMakeCircle(432, 336, angle, 1, 1, objPirateApple)
    }
    
    if (mode == 2) {
        if (timer%40 == 0) {
            scrMakeCircle(40, 320, 0, 1, 4, objPirateApple)
            scrMakeCircle(40, 352, 0, 1, 4, objPirateApple)
        }
        if (timer%40 == 20) {
            scrMakeCircle(480, 320, 180, 1, 2, objPirateApple)
            scrMakeCircle(480, 288, 180, 1, 2, objPirateApple)
        }
        timer++
    }
    
    if (mode == 3) {
        timer++
        if (timer % 100 == 50) {
            angle = random(360)
            var i = 0
            for (i = 0; i &lt; 20; i++) {
                with instance_create(384+lengthdir_x(128, angle + i*10), 368+lengthdir_y(128, angle + i*10), objPirateApple) {
                    direction = point_direction(x, y, 384, 368)
                    speed = 1.75
                }
            }
        }
    }
    
    if (mode == 4) {
        timer++
        if (timer % 12 == 0) {
            with instance_create(304, 256, objPirateApple) {
                hspeed = random_range(-1,1)
                vspeed = -7
                gravity = .1
                depth = -1000000
            }
            with instance_create(480, 256, objPirateApple) {
                hspeed = random_range(-1,1)
                vspeed = -7
                gravity = .1
                depth = -1000000
            }
        }
    }
    
    if (mode == 5) {
        timer++
        if (timer%25 == 0) {
            with instance_create(288, 224, objPirateApple) {
                hspeed = -3
            }
        }
        if (timer%5 == 0 &amp;&amp; timer &gt;= 50) {
           with instance_create(288, 160+176, objPirateApple) {
                hspeed = -10
            } 
        }
    }
    
    if (mode == 6) {
        timer++
        if (timer%5 == 0 &amp;&amp; timer &gt;= 50) {
           with instance_create(288, 432, objPirateApple) {
                vspeed = -10
           } 
           with instance_create(352, 80, objPirateApple) {
                vspeed = 10
           } 
        }
        
        if (timer%30 == 0) {
           with instance_create(128, 336, objPirateApple) {
                hspeed = 3.5
           } 
           with instance_create(128, 224, objPirateApple) {
                hspeed = 3.5
           } 
        }
        
        if (timer%30 == 15) {
           with instance_create(512, 288, objPirateApple) {
                hspeed = -3.5
           } 
           with instance_create(512, 176, objPirateApple) {
                hspeed = -3.5
           } 
        }
    }
    
    if (mode == 7) {
        timer++
        accel += .03
        angle += accel
        
        with instance_create(608, 368, objPirateApple) {
            speed = 10
            direction = other.angle
        } 
    }
    
    if (timer == maxTimer) {
       phase++
    }
}

if (phase == 2) {
    with (objPirateApple)
        image_alpha -= .01
    if (objPirateApple.image_alpha == 0) {
        instance_destroy(objPirateApple)
        instance_destroy()
    }
          
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (phase == 1) {
    draw_set_halign(fa_center)
    draw_set_color(c_lime)
    draw_set_font(fPirate)
    draw_set_alpha(.5)
    if (mode == 1)
        draw_text(432, 400, string(ceil((maxTimer-timer)/50)))
    if (mode == 2)
        draw_text(276, 320, string(ceil((maxTimer-timer)/50)))
    if (mode == 3)
        draw_text(384, 368, string(ceil((maxTimer-timer)/50)))
    if (mode == 4)
        draw_text(400, 208, string(ceil((maxTimer-timer)/50)))
    if (mode == 5)
        draw_text(96, 240, string(ceil((maxTimer-timer)/50)))
    if (mode == 6)
        draw_text(320, 288, string(ceil((maxTimer-timer)/50)))
    if (mode == 7)
        draw_text(616, 400, string(ceil((maxTimer-timer)/50)))
    
    draw_set_color(c_white)
    draw_set_alpha(1)
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
