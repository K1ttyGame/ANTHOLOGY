<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMMEye</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>objPlayerKiller</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//main variables
hp = 12 //should be 25
iframes = 0
maxHP = hp
phase = -1
timer = 0;
GB = 255
angle = 0

flag = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//iframes and visual code
if iframes &gt; 0 {iframes -= 1}
if (GB &lt; 255) {
    GB += 10
}
if (GB &gt;= 254) {GB = 255}

if (instance_exists(objFrozenBossMain))
    y = ystart+objFrozenBossMain.wobble_distance*sin(objFrozenBossMain.aa);

//phases
if (phase == -1) {
    timer++
    if (timer == 50) {
        timer = 0
        phase = irandom_range(0,1)*2;
    }
}

if (phase == 0) {
    if !instance_exists(objMMMini1) instance_create(64, 254, objMMMini1)
    if !instance_exists(objMMMini2) instance_create(608, 254, objMMMini2)
    phase++    
}

if (phase == 1) {
    if (!instance_exists(objMMMini1) &amp;&amp; !instance_exists(objMMMini2)) {
        timer++
        if (timer == 50) {
            timer = 0
            if (flag) phase = 4
            else {
                flag = true
                phase = 2
            }
        }
    }
}

if (phase == 2) {
    if !instance_exists(objMMMini3) instance_create(0, 0, objMMMini3)
    if !instance_exists(objMMMini4) {
        with instance_create(0, 0, objMMMini4) {
            spinAngle = objMMMini3.spinAngle + 120
        }
    }
    if !instance_exists(objMMMini5) {
        with instance_create(0, 0, objMMMini5) {
            spinAngle = objMMMini3.spinAngle + 240
        }
    }
    phase++    
}

if (phase == 3) {
    if (!instance_exists(objMMMini3) &amp;&amp; !instance_exists(objMMMini4)&amp;&amp; !instance_exists(objMMMini5)) {
        timer++
        if (timer == 50) {
            timer = 0
            if (flag) phase = 4
            else {
                flag = true
                phase = 0
            }
        }
    }
}

if (phase == 4) {
    if (instance_exists(objFrozenBossMain)) {
        if (objFrozenBossMain.value &lt; 255) {
            objFrozenBossMain.value += 5
        }
        if (objFrozenBossMain.value == 175) {
            phase++
            audio_play_sound(sndEyeOpen, 10, false)
            }
    }
}

if (phase == 5) {
    timer++
    if (timer == 23) {
        timer = 0
        phase++
    }
}

if (phase == 6) {
    with instance_create(384, 448, objBossShootSpike) {
        image_speed = .1
        sprite_index = sprMMSpearSpike
    }
    phase++
}

if (phase == 7) {
    with objBossShootSpike {y = lerp(y, 416, .1)}
    timer++
    if (timer == 5) {
        with instance_create(x, y, objMMProjectile) {
            direction = other.angle
            image_angle = direction
            speed = 7
            sprite_index = sprMMVProjectile
        }
        with instance_create(x, y, objMMProjectile) {
            direction = -other.angle
            image_angle = direction
            speed = 3
            sprite_index = sprMMVProjectile
        }
        timer = 0
        angle += 170
        if (angle &gt;= 360)
            angle -= 360
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if iframes == 0 {
    hp -= 1
    iframes = 30
    //create hit apples
    audio_play_sound(sndMMBossHit, 10, false)
    GB = 0
    if (hp &lt;= 0) {
        instance_destroy();
        if (instance_exists(objPlayer)) instance_destroy(objPlayer)
        room_goto_next();
    }
    with other instance_destroy()
}

with other instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var red = make_color_rgb(255, GB, GB);
if (phase == 5) {
    draw_sprite_ext(sprMMEyeAppear, floor(timer/4), x, y, image_xscale, image_yscale, 0, red, 1)
    }
if (phase &gt;= 6) {
    image_speed = .1
    draw_sprite_ext(sprMMEye, image_index, x, y, image_xscale, image_yscale, 0, red, 1)
    }
draw_set_alpha(1)
draw_set_color(c_white)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
