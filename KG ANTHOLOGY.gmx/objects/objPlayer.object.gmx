<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayerIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprPlayerMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>frozen = false; //sets if the player can move or not

jump = 8.5 * global.grav; //set how fast the player jumps
jump2 = 7 * global.grav; //sets how fast the player double jumps
gravity = 0.4 * global.grav; //player gravity

djump = 1; //allow the player to double jump as soon as he spawns
maxSpeed = 3;   //max horizontal speed
maxVspeed = 9;  //max vertical speed
image_speed = 0.2; //initial speed of animation
onPlatform = false; //sets if player is currently standing on a platform

xScale = 1; //sets the direction the player is facing (1 is facing right, -1 is facing left)

scrSetPlayerMask(); //set the player's hitbox

if (global.difficulty == 0 &amp;&amp; global.gameStarted)   //create the player's bow
    instance_create(x,y,objBow);

if (global.autosave) //save the game if currently set to autosave
{
    scrSaveGame(true);
    global.autosave = false;
}

coyote = 5 //frames of coyote time

clawed = false //determines if can move

drink = false //determine if 2x speed, beachventure
drinkTimer = 0

space = false
spaceAirFlag = false

puzzle = false
puzzleGUI = false
puzzleIndex = 0
interact = false
combine = false
combineIndex = 0
currentItem = 0

zipline = false
ziplineCooldown = 0
momentum = false
canUseMomentum = false //set in switch statement

paint = false
paintAngle = false

//[Better Block]
//used to check if riding a platform will put the player into/through a block
platCheck = 0;
platCounter = 0;
//the Better Platform/Block which the player is on, if there is one
riding = noone;
//records player movement
PhSpd = 0;
PvSpd = 0;
//amount pushed by Better Blocks (used to carry the player)
hPush = 0;
//Version 1.1: used to store the relationship between the player's origin and their bbox
leftToOrigin = (sprite_get_xoffset(mask_index) - sprite_get_bbox_left(mask_index))*image_xscale;
rightToOrigin = (sprite_get_bbox_right(mask_index) - sprite_get_xoffset(mask_index) + 1)*image_xscale;
topToOrigin = (sprite_get_yoffset(mask_index) - sprite_get_bbox_top(mask_index))*image_yscale;
bottomToOrigin = (sprite_get_bbox_bottom(mask_index) - sprite_get_yoffset(mask_index) + 1)*image_yscale;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//when the player is destroyed, also destroy the bow
with (objBow)
    instance_destroy();
    
audio_stop_sound(sndSpaceSuitAir)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((x &lt; 0 || x &gt; room_width || y &lt; 0 || y &gt; room_height) &amp;&amp; global.edgeDeath)  //check if player has left the room
    scrKillPlayer();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///BetterBlock

//Set up Player variables for objBetterBlock and objBetterMovingPlatform
PhSpd = (x - xprevious);
PvSpd = (y - yprevious);

//Version 1.1: used to store the relationship between the player's origin and their bbox
leftToOrigin = (sprite_get_xoffset(mask_index) - sprite_get_bbox_left(mask_index))*image_xscale;
rightToOrigin = (sprite_get_bbox_right(mask_index) - sprite_get_xoffset(mask_index) + 1)*image_xscale;
topToOrigin = (sprite_get_yoffset(mask_index) - sprite_get_bbox_top(mask_index))*image_yscale;
bottomToOrigin = (sprite_get_bbox_bottom(mask_index) - sprite_get_yoffset(mask_index) + 1)*image_yscale;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (clawed == false &amp;&amp; space == false &amp;&amp; zipline == false) {

//check button presses
var L = keyboard_check(global.leftButton);
var R = keyboard_check(global.rightButton);

var h = 0;

if (!frozen)    //don't move if frozen
{
    if (R)
        h = 1;
    else if (L)
        h = -1;
}

//frozen code
if (frozen) {
    visible = false
}
else
    visible = true



var slipBlockTouching = instance_place(x,y+(1*global.grav),objSlipBlock);   //check if near a slip block

//vine checks
var notOnBlock = (place_free(x,y+(global.grav)) &amp;&amp; !instance_exists(riding));
var onVineL = (place_meeting(x-1,y,objWalljumpL) &amp;&amp; notOnBlock);
var onVineR = (place_meeting(x+1,y,objWalljumpR) &amp;&amp; notOnBlock);

if (h != 0)  //player is moving
{
    if (!onVineR &amp;&amp; !onVineL)   //make sure not currently touching a vine
    {
        xScale = h;
    }
    if ((h == -1 &amp;&amp; !onVineR) || (h == 1 &amp;&amp; !onVineL))
    {
        if (instance_exists(objWindControl)) {
            if (objWindControl.windMode == -1) {
                if (R)
                    hspeed = maxSpeed * h * .5
                else if (L)
                    hspeed = maxSpeed * h * 2
            }
            if (objWindControl.windMode == 1) {
                if (R)
                    hspeed = maxSpeed * h * 2
                else if (L)
                    hspeed = maxSpeed * h * .5
            }
            if (objWindControl.windMode == 0) {
                if (R)
                    hspeed = maxSpeed * h
                else if (L)
                    hspeed = maxSpeed * h
            }
        sprite_index = sprPlayerRunning;
            image_speed = 0.5;
        }
        
        else if (drink) {
            hspeed = 2 * maxSpeed * h;
        }
        
        else if (momentum &amp;&amp; canUseMomentum) {
            //do nothing
        }
        
        else {
            if (slipBlockTouching == noone) //not touching a slip block, move immediately at full speed
                hspeed = maxSpeed * h;
            
            else    //touching a slip block, use acceleration
            {
                hspeed += (slipBlockTouching.slip) * h;
                
                if (abs(hspeed) &gt; maxSpeed)
                    hspeed = maxSpeed * h;
            }
            
            sprite_index = sprPlayerRunning;
            image_speed = 0.5;
        }
    }
}

else if (momentum &amp;&amp; canUseMomentum) {
            //do nothing
    }
else    //player is not moving
{
    if (slipBlockTouching == noone) //not touching a slip block, stop immediately
        hspeed = 0;
    else    //touching a slip block, slow down
    {
        if (hspeed &gt; 0)
        {
            hspeed -= slipBlockTouching.slip;
            
            if (hspeed &lt;= 0)
                hspeed = 0;
        }
        else if (hspeed &lt; 0)
        {
            hspeed += slipBlockTouching.slip;
            
            if (hspeed &gt;= 0)
                hspeed = 0;
        }
    }
    
    //wind control
    if (instance_exists(objWindControl)) {
        if (objWindControl.windMode == 1) {
            hspeed = 1
        }
        if (objWindControl.windMode == -1) {
            hspeed = -1
        }
    }
  
    sprite_index = sprPlayerIdle;
    image_speed = 0.2;
}


if (!onPlatform)    //check if standing on a platform
{
    if((vspeed * global.grav) &lt; -0.05) {sprite_index = sprPlayerJump;}
    else if((vspeed * global.grav) &gt; 0.05) {sprite_index = sprPlayerFall;}
}
else
{
    if (!place_meeting(x,y+(4*global.grav),objPlatform)) {onPlatform = false;}
}

var slideBlockTouching = instance_place(x,y+(global.grav),objSlideBlock);   //check if on a slide block

if (slideBlockTouching != noone)    //on a slide block, start moving with it
    hspeed += slideBlockTouching.h;

if (abs(vspeed) &gt; maxVspeed) {vspeed = sign(vspeed)*maxVspeed;} //check if moving vertically faster than max speed

if (!frozen)    //check if frozen before doing anything
{
    if (keyboard_check_pressed(global.shootButton)) {
        if (paint == true) {
            if (instance_number(objPaintGunParticle) &lt; 5) {
                with (instance_create(x, y, objPaintGunParticle)) {
                    speed = 10
                    gravity = .2
                    direction = other.paintAngle
                }
            }
        }
        else
            scrPlayerShoot();
    }
    if (keyboard_check_pressed(global.jumpButton))
        scrPlayerJump();
    if (keyboard_check_released(global.jumpButton)) //remove check for spring if breaking
        scrPlayerVJump();
    //if (keyboard_check_pressed(global.suicideButton))
    //    scrKillPlayer();
}


//walljumps

if (onVineL || onVineR)
{
    if (onVineR)
        xScale = -1;
    else
        xScale = 1;
    
    vspeed = 2 * global.grav;
    sprite_index = sprPlayerSliding;
    image_speed = 1/2;
    
    //pressed away from the vine
    if (onVineL &amp;&amp; keyboard_check_pressed(global.rightButton)) || (onVineR &amp;&amp; keyboard_check_pressed(global.leftButton))
    {
        if (keyboard_check(global.jumpButton))  //jumping off vine
        {
            if (onVineR)
                hspeed = -15;
            else
                hspeed = 15;
            
            vspeed = -9 * global.grav;
            audio_play_sound(sndWallJump,0,false);
            sprite_index = sprPlayerJump;
        }
        else    //moving off vine
        {
            if (onVineR)
                hspeed = -3;
            else
                hspeed = 3;
            
            sprite_index = sprPlayerFall;
        }
    }
}

//coyote time
if !(instance_place(x, y+1, objPlatform)) {
    if (coyote &gt; 0) coyote--
}
else {
    coyote = 5
}

}

//drink
if (drink) {
    drinkTimer--
    if (drinkTimer == 0)
        drink = false
}

//player sprite changing
switch (room) {
    case rBeachHotel:
    case rBeachIntro:
    case rBeachHammock:
    case rBeachHammock2:
    case rBeachBasketball:
    case rBeachDrink1:
    case rBeachDrink2:
    case rBeachCombo:
    case rBeachCutscene:
    case rStorm2:
    case rStorm3:
    case rStorm4:
    case rStorm5:
    case rStorm6:
    case rStormCutscene:
    case rPirate1:
    case rPirate2:
    case rPirate3:
    case rPirate4:
    case rPirate5:
    {
        if (sprite_index = sprPlayerIdle)
            sprite_index = sprBPlayerIdle
        if (sprite_index = sprPlayerRunning)
            sprite_index = sprBPlayerRunning
        if (sprite_index = sprPlayerFall)
            sprite_index = sprBPlayerFall
        if (sprite_index = sprPlayerJump)
            sprite_index = sprBPlayerJump
    }
        break;

    case rSnow0:
    case rSnowTransition:
    case rSnow1:
    case rSnow2:
    case rSnow3:
    case rSnow4:
    case rSnow5:
    case rSnow6:
    case rSnow7:
    case rSnow8:
    case rSnowTransition2:
    {
        if (sprite_index = sprPlayerIdle)
            sprite_index = sprFPlayerIdleMask
        if (sprite_index = sprPlayerRunning)
            sprite_index = sprFPlayerRunMask
        if (sprite_index = sprPlayerFall)
            sprite_index = sprFPlayerFallMask
        if (sprite_index = sprPlayerJump)
            sprite_index = sprFPlayerJumpMask
    }
        break;
    case rCave1:
    case rCave2:
    case rCave3:
    case rCave4:
    case rCave5:
    case rCave6:
    case rCave7:
    case rFrozenBoss:
    {
        if (sprite_index = sprPlayerIdle)
            sprite_index = sprFPlayerIdle
        if (sprite_index = sprPlayerRunning)
            sprite_index = sprFPlayerRun
        if (sprite_index = sprPlayerFall)
            sprite_index = sprFPlayerFall
        if (sprite_index = sprPlayerJump)
            sprite_index = sprFPlayerJump
    }
        break;
    case rSpaceTest:
    case rSpaceA:
    case rSpaceB:
    case rSpaceC:
    case rSpaceD:
    case rSpaceE:
    case rSpaceF:
    case rSpaceEmpty:
        space = true
        sprite_index = sprSpaceSuit
        break;
    case rGardenFarLeft:
    case rGardenLeft:
    case rGardenMiddle:
    case rGardenRight:
    case rGardenFarRight:
    case rMansionLeft:
    case rMansionLeftUp:
    case rMansionCenter:
    case rMansionRight:
    case rMansionRightUp:
    case rMansionAttic:
        puzzle = true
        break;
    case rFall1:
    case rFall2:
    case rFall3:
    case rFall4:
    case rFall5:
    case rFall6:
    case rField3:
    case rField4:
    case rField5:
    case rField7:
    case rField9:
        canUseMomentum = true
        break;
    case rSpaceship1:
    case rSpaceship2:
    case rSpaceship3:
    case rSpaceship4:
    case rSpaceship5:
    case rSpaceship6:
    case rSpaceshipBoss:
        paint = true
        break;
    default:
        puzzle = false
        space = false
        canUseMomentum = false
        paint = false
        break;
}

if (global.noDeath) image_alpha = .7
else image_alpha = 1

if (global.infJump) image_blend = c_blue
else image_blend = c_white

//space
if (space == true) {
    gravity = 0
    if (keyboard_check(global.leftButton)) {
        hspeed -= .0035
        with instance_create(x, y, objSpaceSuitPart) hspeed = .75
        }
    if (keyboard_check(global.rightButton)) {
        hspeed += .0035
        with instance_create(x, y, objSpaceSuitPart) hspeed = -.75
        }
    if (keyboard_check(global.upButton)) {
        vspeed -= .0035
        with instance_create(x, y, objSpaceSuitPart) vspeed = .75
        }
    if (keyboard_check(global.downButton)) {
        vspeed += .0035
        with instance_create(x, y, objSpaceSuitPart) vspeed = -.75
        }
        
    if (keyboard_check(global.leftButton) || keyboard_check(global.rightButton) || keyboard_check(global.upButton) || keyboard_check(global.downButton)) {
            if !audio_is_playing(sndSpaceSuitAir) {audio_play_sound(sndSpaceSuitAir, 10, true)}
        }
    else {
        audio_stop_sound(sndSpaceSuitAir)
        }
        
    if (hspeed != 0)
        image_xscale = sign(hspeed)
}

//puzzle
if (puzzle) {
    if (keyboard_check_pressed(vk_control)) {
        puzzleGUI = !puzzleGUI
        if (puzzleGUI == false) {
            combine = false
            interact = false
        }
    }
        
    if (puzzleGUI) {
        objPlayer.frozen = true
        objPlayer.visible = true
        
        if (keyboard_check_pressed(ord('I')) &amp;&amp; combine == false &amp;&amp; ds_list_size(global.inventory) != 0) {
            interact = !interact
        }
        
        if (keyboard_check_pressed(ord('U')) &amp;&amp; interact == false &amp;&amp; ds_list_size(global.inventory) != 0) {
            combine = !combine
            if (combine == false) combineIndex = 0
        }
        
        
        if (interact) {
            scrInteract(global.inventory[|puzzleIndex])
        }
        
        else if (combine) {
            if (keyboard_check_pressed(global.rightButton)) {
                combineIndex++
                }
                
            if (keyboard_check_pressed(global.leftButton)) {
                combineIndex--
                }
            
            if (combineIndex &gt;= ds_list_size(global.inventory))
                combineIndex = 0
            if (combineIndex &lt; 0)
                combineIndex = ds_list_size(global.inventory)-1
                
            if (keyboard_check_pressed(ord('Y')))
                scrCombine(global.inventory[|puzzleIndex], global.inventory[|combineIndex])
        }
        
        else if (combine == false &amp;&amp; interact == false) {
            if (keyboard_check_pressed(global.rightButton))
                puzzleIndex++
            if (keyboard_check_pressed(global.leftButton))
                puzzleIndex--
        }
        
        if (puzzleIndex &gt;= ds_list_size(global.inventory))
            puzzleIndex = 0
        if (puzzleIndex &lt; 0)
            puzzleIndex = ds_list_size(global.inventory)-1
    }
    else {
        objPlayer.frozen = false
        objPlayer.visible = true
    }
}

//zipline
if (zipline &amp;&amp; ziplineCooldown == 0) {
    if instance_exists(objZiplinePoint) {
        x = objZiplinePoint.x
        y = objZiplinePoint.y
        gravity = 0
        frozen = true
        sprite_index = sprPlayerZipline
        image_speed = 0
    }
}

else image_speed = 0.2;

if (ziplineCooldown &gt; 0) ziplineCooldown -= 1

//paint gun
if (paint) {
    if (keyboard_check(global.upButton)) paintAngle += 4
    if (keyboard_check(global.downButton)) paintAngle -= 4
    if (paintAngle &lt; 0) paintAngle += 360
    else if (paintAngle &gt; 360) paintAngle -= 360
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlayerKiller">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrKillPlayer();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlatform">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (scrIsBetterPlatform(other) || scrIsBetterBlock(other)) exit;

if (global.grav == 1)   //normal
{
    if (y-vspeed/2 &lt;= other.y)
    {
        if (other.vspeed &gt;= 0)
        {
            y = other.y-9;
            vspeed = other.vspeed;
        }
        
        onPlatform = true;
        djump = 1;
    }
}
else    //flipped
{
    if (y-vspeed/2 &gt;= other.y+other.sprite_height-1)
    {
        if (other.yspeed &lt;= 0)
        {
            y = other.y+other.sprite_height+8;
            vspeed = other.yspeed;
        }
        
        onPlatform = true;
        djump = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBetterBlock">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Push out to avoid colliding with objects embedded in Better Blocks
PhSpd = (x - xprevious);
PvSpd = (y - yprevious);
with (other){
    event_user(0);
    event_user(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBlock">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (scrIsBetterPlatform(other) || scrIsBetterBlock(other)) exit;

if (!place_free(x+hspeed,y))
{
    if (global.grav == 1)   //normal
    {
        if(hspeed &lt;= 0){move_contact_solid(180,abs(hspeed));}
        if(hspeed &gt; 0){move_contact_solid(0,abs(hspeed));}
    }
    else    //flipped
    {
        if(hspeed &lt; 0){move_contact_solid(180,abs(hspeed));}
        if(hspeed &gt;= 0){move_contact_solid(0,abs(hspeed));}
    }
    hspeed = 0;
}
 
if (!place_free(x,y+vspeed))
{
    if (global.grav == 1)   //normal
    {
        if(vspeed &lt;= 0){move_contact_solid(90,abs(vspeed));}
        if(vspeed &gt; 0){move_contact_solid(270,abs(vspeed));djump=1;}
    }
    else    //flipped
    {
        if(vspeed &lt;= 0){move_contact_solid(90,abs(vspeed));djump=1;}
        if(vspeed &gt; 0){move_contact_solid(270,abs(vspeed));}
    }
    vspeed = 0;
}

if (!place_free(x+hspeed,y+vspeed)) {hspeed = 0;}

if (!place_free(x, y))
    scrKillPlayer();
    
momentum = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>drink = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw drink meter
if (drink) {
    scrDrawPie(x+2, y-46, drinkTimer, 150, c_black, 16, .4)
    scrDrawPie(x, y-48, drinkTimer, 150, c_orange, 16, 1)
}

//draw puzzle UI
if (puzzleGUI) {
    draw_set_color(c_black)
    draw_set_alpha(.8)
    //draw_rectangle(view_xview-1, view_yview-1, view_xview+view_wview+1, view_yview+view_hview+1, false)
    draw_rectangle(-1, -1, 801, 609, false) //delete if broken
    draw_set_color(c_white)
    draw_set_alpha(1)
    
    scrDrawInventory()
    
    if (interact) {
        scrInteractDraw(global.inventory[|puzzleIndex])
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw the player

var drawX = x;
var drawY = y;

if (global.grav == -1)      //need to draw the player a pixel off in the y-axis when flipped for some reason
    drawY += 1;

if (space == true) {
    var i
    if (hspeed &gt; 0) {
        for (i = 0; i &lt; floor(12*abs(hspeed)); i++)
            draw_sprite(sprSpaceArrow, 0, x+(i*5)-1, y-10)
    }
    if (hspeed &lt; 0) {
        for (i = 0; i &lt; floor(12*abs(hspeed)); i++)
            draw_sprite_ext(sprSpaceArrow, 0, x-(i*5)-1, y-10, -1, 1, 0, c_white, 1)
    }
    if (vspeed &lt; 0) {
        for (i = 0; i &lt; floor(12*abs(vspeed)); i++)
            draw_sprite(sprSpaceArrowUp, 0, x-4, y-(i*6))
    }
    if (vspeed &gt; 0) {
        for (i = 0; i &lt; floor(12*abs(vspeed)); i++)
            draw_sprite_ext(sprSpaceArrowUp, 0, x-4, y+(i*6), 1, -1, 0, c_white, 1)
    }
}

if (paint) {
    draw_sprite_ext(sprPaintGunArm, 0, drawX, drawY, 1, 1, paintAngle, c_white, 1) 
}
    
draw_sprite_ext(sprite_index,image_index,drawX,drawY,image_xscale*xScale,image_yscale*global.grav,image_angle,image_blend,image_alpha);

//var o
//for (o = 0; o &lt; ds_list_size(global.inventory); o += 1)
//    draw_text(32+(32*o), 32, string(global.inventory[| o]))
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
