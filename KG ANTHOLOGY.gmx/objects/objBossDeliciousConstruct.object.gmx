<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprDCMain</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100000000</depth>
  <persistent>0</persistent>
  <parentName>objPlayerKiller</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//init variables
hp = 40; //max hp of boss, should be 300
maxHP = 40; //should equal hp
GB = 255 //don't change, controls red flash effect

drawHPX = x; //controls x of hp gui
drawHPY = y; //controls y of hp gui

wobbleSpeed = .15*pi/room_speed; //speed of the wobble
wobbleDistance = 8; //distance of the wobble
aa = 0;

drawEndX = 0; //for drawing end of hp line 
tempPlayerX = 0;

if instance_exists(objPlayer) {
    if (objPlayer.x &gt;= x) {
        drawHPX = x+(sprite_width-sprite_xoffset)+96
        drawEndX = drawHPX-string_width(string(hp))-4
        }
    if (objPlayer.x &lt; x) {
        drawHPX = x-sprite_xoffset-96
        drawEndX =  drawHPX+string_width(string(hp))
        }
    tempPlayerX = objPlayer.x //for checking player X when dead
}

//boss specific variables
ghostTimer = 40; //controls when the boss spawns ghost effect
phase = 0; //general phase counter
timer = 0; //general use timer
bounceCounter = 0; //used for counting bounces
inAttack = false; //check if in attack (freezes bounce counter)
rotAngle = irandom(360) //used for random spinning attack
bounceCap = 5 //check how many bounces before special attack
GBMax = 255 //used to limit image blend amount
spinSpeed = 0 //used to increase spin speed of clinch phase
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if image_alpha != 1 {image_alpha += .01}
//if GB &lt; GBMax {GB += 15}
//if GB &gt; GBMax {GB -= 15}
if (GB &lt; 255) GB += 5

//control hp gui y pos
aa+=wobbleSpeed;
if (aa &gt;= 360)
    aa -= 360;
drawHPY = y + wobbleDistance*sin(aa);

//control hp gui x pos
if (instance_exists(objPlayer)) {
    if (objPlayer.x &lt; x) {
        drawHPX = lerp (drawHPX, x+(sprite_width-sprite_xoffset)+96, .1);
        }
    if (objPlayer.x &gt;= x) {
        drawHPX = lerp (drawHPX, x-sprite_xoffset-96, .1);
        }
}

//set end line
if instance_exists(objPlayer) {
    if (objPlayer.x &gt;= x)
        drawEndX = drawHPX-string_width(string(hp))-4;
    if (objPlayer.x &lt; x)
        drawEndX = drawHPX+string_width(string(hp));
}

//clamp hp x and y
drawHPX = clamp (drawHPX, string_width(string(hp)), room_width-string_width(string(hp)))
drawHPY = clamp (drawHPY, string_height(string(hp)), room_height-string_height(string(hp)))


//boss specific code
if (ghostTimer == 40) {
    ghostTimer = 0;
    instance_create(x, y, objBossDCGhost)
}
ghostTimer++



//*********//


    //phases
if (phase == 0) { //choose random hspeed to start bouncing
    do {
        hspeed = irandom_range(-4,4)*2
    }
    until (abs(hspeed) &gt; 2)
    inAttack = false;
    phase++;
    bounceCounter = 0;
    timer = 0;
    rotAngle = irandom(360)
}

if (phase &gt;= 1) {
    if (phase &lt;= 6)
        vspeed += .25;
    if (place_meeting(x-hspeed, y, objBasketballBlock)) or (place_meeting(x+hspeed, y, objBasketballBlock)) { //bounce at walls
        hspeed = -hspeed;
        audio_stop_sound(sndBounce)
        audio_play_sound(sndBounce, 10, false)
        }
    if (place_meeting(x, y+vspeed, objBasketballBlock)){ //bounce at floor
        vspeed += -.2;
        vspeed = -vspeed;
        //scrScreenShake(8);
        //audio_play_sound(sndBounce, 10, false)
        audio_stop_sound(sndBounce)
        audio_play_sound(sndBounce, 10, false)
        if (phase &lt;= 5) {
            repeat(10)
            instance_create(x+irandom_range(-20,20), y+sprite_height/2, objBDCGroundCherry);
        }
        if (!inAttack)
            bounceCounter++;
        if (phase == 2)
            phase = 0;
        }
        
}

if (bounceCounter &gt;= bounceCap &amp;&amp; inAttack == false) {
    inAttack = true; //turn off bounce counter
    phase = irandom_range(1,3)*2 //choose random phase
}

if (phase == 2)
    hspeed = 0;
    
if (phase == 4) {
    timer++;
    if (!instance_exists(objDCWarningSign))
        instance_create(x, y+(sprite_height-sprite_yoffset), objDCWarningSign);
    if (vspeed &gt;= 0 and timer &gt;= 100) {
        phase++
        with objDCWarningSign instance_destroy();
        hspeed /= 2;
        timer = 0;
    }
}

if (phase == 5) {
    if (timer%3 == 0) {
        audio_stop_sound(sndAppleBurst)
        audio_play_sound(sndAppleBurst, 10, false);
        }
    timer++
    vspeed = 0
    repeat(2) with instance_create(x+random_range(-10,10), y+(sprite_height-sprite_yoffset)-30, objBDCGroundCherry) {
            depth = 1;
            vspeed = random_range(7,8)
    }
        
    //scrScreenShake(5);
    if (timer == 75) {
        phase = 1;
        hspeed *= 2
        inAttack = false;
        phase++;
        bounceCounter = 0;
        timer = 0;
        audio_play_sound(sndAppleBurst, 10, false);
    }
}

if (phase == 6) {
    if !(instance_exists(objDCWarningArrow))
        instance_create(x, y, objDCWarningArrow);
    if (timer &lt;= 75)
        rotAngle += 10;
    else {
        if !(audio_is_playing(sndPingWarning))
            audio_play_sound(sndPingWarning, 10, false);
    }
    timer++
    hspeed *= .995
    vspeed *= .995
    if (timer == 100) {
        phase++;
        timer = 0;
        direction = rotAngle
        speed = 20
        with (objDCWarningArrow) instance_destroy();
    }
    
}

if (phase == 7) {
    timer++;
    if (timer == 150) {
        timer = 0;
        speed = 0;
        phase++
    }
    //if (place_meeting(x-hspeed, y, objBlock)) or (place_meeting(x+hspeed, y, objBlock))
        //scrScreenShake(8);
}

if (phase == 8) {
    timer++
    x = lerp (x, xstart, .1)
    y = lerp (y, ystart, .1)
    if (timer == 50)
        phase = 0;
}

//clinch modes
if (hp &lt;= maxHP/2) { //halfway clinch
    if (bounceCap == 5)
        bounceCap = 3; //increase special attack time
}

//disable clinch mode
//if (hp &lt;= maxHP/5) {
//    if (phase &lt;= 8) {
//        phase = 9;
//        timer = 0;
//    }
//}

//phase 9 mode
if (phase == 9) {
    timer++
    bounceCounter = 0;
    x = lerp (x, xstart, .1)
    y = lerp (y, ystart, .1)
    hspeed = 0;
    vspeed = 0;
    if (timer == 50) {
        phase++
        timer = 0;
        }
}

if (phase == 10) { //first apple mode
    if (timer%40 == 0) {
        scrMakeCircle(x, y, random(360), 10, 3, objBDCGroundCherry);
        audio_play_sound(sndBounce, 10, false)
        }
    timer++;
    if (timer == 200) {
        timer = 0;
        phase++
    }
}

if (phase == 11) { //second apple mode
    if (timer%40 == 0) {
        scrMakeCircle(x, y, random(360), 2, 4, objBDCSpawnCherry);
        audio_play_sound(sndBounce, 10, false)
        }
    timer++;
    if (timer == 200) {
        timer = 0;
        phase--;
    }
}

if (phase &gt;= 10 and phase &lt;= 11) {
    if (spinSpeed &lt;= 20)
        spinSpeed += .2
    image_angle += spinSpeed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp -= 1
GB = 0
audio_play_sound (sndPlasmaShoot, 10, false)

if (hp &lt;= 0) {
    instance_destroy();
    instance_create(x, y, objDeliciousConstructDeath)
    }

with other instance_destroy()

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(make_color_rgb(255, GB, GB))
draw_line_width(x, y, drawHPX, drawHPY+16, 2)
draw_set_color(c_white)

image_speed = .1
//image_blend = make_colour_rgb (255, GB, GB)
draw_self();

image_blend = c_white



draw_set_color(c_white)
draw_set_font(fBossWarning16)
if (instance_exists(objPlayer)) {
    if (objPlayer.x &gt;= x) 
        draw_set_halign(fa_right);
    if (objPlayer.x &lt; x)
        draw_set_halign(fa_left);
}

draw_set_color(make_color_rgb(255, GB, GB))

draw_text(drawHPX, drawHPY, hp)

if (instance_exists(objPlayer))
    tempPlayerX = objPlayer.x;

if (tempPlayerX &gt;= x)
    draw_line_width(drawEndX, drawHPY+16, drawHPX, drawHPY+16, 2);
if (tempPlayerX &lt; x)
    draw_line_width(drawHPX, drawHPY+16, drawEndX, drawHPY+16, 2);

draw_set_color(c_white)
    
//draw_line_width(drawEndX, drawHPY+22, drawEndX, drawHPY, 2)

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
